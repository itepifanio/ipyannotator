{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e15c1e2d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# default_exp docs.utils"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "73b3212f",
   "metadata": {
    "tags": [
     "remove-cell"
    ]
   },
   "outputs": [],
   "source": [
    "# hide\n",
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2cd1d0c4",
   "metadata": {
    "tags": [
     "remove-cell"
    ]
   },
   "outputs": [],
   "source": [
    "# hide\n",
    "from nbdev import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ffcac7ef",
   "metadata": {
    "tags": [
     "remove-input"
    ]
   },
   "outputs": [],
   "source": [
    "#exporti\n",
    "# pylint: skip-file\n",
    "import os\n",
    "from fastcore.docments import isclass"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "449065ec",
   "metadata": {},
   "source": [
    "# Doc Utils\n",
    "\n",
    "This notebook develops helper modules to build Ipyannotator's static documentation."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77fc616b",
   "metadata": {},
   "source": [
    "The next cell design a helper function that check if the documentation it's been built. This is specially helpful to mock some behaviors that doesn't work well on static docs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f340d2fb",
   "metadata": {
    "tags": [
     "remove-input"
    ]
   },
   "outputs": [],
   "source": [
    "#exporti\n",
    "def is_building_docs() -> bool:\n",
    "    return 'DOCUTILSCONFIG' in os.environ"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8222a52b",
   "metadata": {},
   "source": [
    "## Show doc overriding \n",
    "\n",
    "Nbdev [show_doc](https://github.com/fastai/nbdev/blob/master/nbdev/showdoc.py) function doesn't link the type hint correctly.\n",
    "\n",
    "### Previous behavior\n",
    "\n",
    "<div class=\"output_subarea output_markdown rendered_html\" dir=\"auto\"><h3 id=\"Annotator\" class=\"doc_header\"><code>class</code> <code>Annotator</code><a href=\"https://github.com/palaimon/ipyannotator/tree/main/ipyannotator/annotator.py#L84\" class=\"source_link\" style=\"float:right\">[source]</a></h3>\n",
    "\n",
    "<blockquote>\n",
    "<p><code>Annotator</code>(<strong><code>input_item</code></strong>:<a href=\"/ipyannotatormltypes.html#Input\"><code>Input</code></a>, <strong><code>output_item</code></strong>:<a href=\"/ipyannotatormltypes.html#Output\"><code>Output</code></a>=<em><code>Annotator Output type: NoOutput</code></em>, <strong><code>settings</code></strong>:<a href=\"/ipyannotatorbase.html#Settings\"><code>Settings</code></a>=<em><code>Settings(project_path=Path('user_project'), project_file=None, image_dir='images', label_dir=None, result_dir=None, im_width=50, im_height=50, label_width=50, label_height=50, n_cols=3, n_rows=None)</code></em>)</p>\n",
    "</blockquote>\n",
    "<p>Ipyannotator uses a pair of input/output to configure its API</p>\n",
    "</div>\n",
    "\n",
    "### Current behavior\n",
    "\n",
    "<div class=\"output_subarea output_markdown rendered_html\" dir=\"auto\"><h3 id=\"Annotator\" class=\"doc_header\"><code>class</code> <code>Annotator</code><a href=\"https://github.com/palaimon/ipyannotator/tree/main/ipyannotator/annotator.py#L84\" class=\"source_link\" style=\"float:right\">[source]</a></h3>\n",
    "\n",
    "<blockquote>\n",
    "<p><code>Annotator</code>(<strong><code>input_item</code></strong>:<a href=\"https://nbviewer.jupyter.org/github/palaimon/ipyannotator/tree/main/nbs/00b_mltypes.ipynb#Types\"><code>Input</code></a>, <strong><code>output_item</code></strong>:<a href=\"https://nbviewer.jupyter.org/github/palaimon/ipyannotator/tree/main/nbs/00b_mltypes.ipynb#Types\"><code>Output</code></a>=<em><code>Annotator Output type: NoOutput</code></em>, <strong><code>settings</code></strong>:<a href=\"https://nbviewer.jupyter.org/github/palaimon/ipyannotator/tree/main/nbs/00_base.ipynb#Helpers\"><code>Settings</code></a>=<em><code>Settings(project_path=Path('user_project'), project_file=None, image_dir='images', label_dir=None, result_dir=None, im_width=50, im_height=50, label_width=50, label_height=50, n_cols=3, n_rows=None)</code></em>)</p>\n",
    "</blockquote>\n",
    "<p>Ipyannotator uses a pair of input/output to configure its API</p>\n",
    "</div>\n",
    "\n",
    "Note that the type hint links were fixed. The following cells override this behavior."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ff4b0294",
   "metadata": {
    "tags": [
     "remove-input"
    ]
   },
   "outputs": [],
   "source": [
    "#exporti\n",
    "import inspect\n",
    "from nbdev.imports import get_config\n",
    "from nbdev.sync import qual_name, get_name\n",
    "from fastcore.script import Param\n",
    "from fastcore.utils import IN_NOTEBOOK\n",
    "from nbdev.showdoc import (\n",
    "    is_enum,\n",
    "    _format_enum_doc,\n",
    "    get_source_link,\n",
    "    add_doc_links,\n",
    "    is_source_available,\n",
    "    _has_docment,\n",
    "    _arg_prefixes,\n",
    "    get_nb_source_link,\n",
    "    _format_annos,\n",
    "    _handle_delegates,\n",
    "    _get_docments\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0716d4af",
   "metadata": {
    "tags": [
     "remove-input"
    ]
   },
   "outputs": [],
   "source": [
    "#exporti\n",
    "if IN_NOTEBOOK:\n",
    "    from IPython.display import Markdown, display"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "93948cd3",
   "metadata": {
    "tags": [
     "remove-input"
    ]
   },
   "outputs": [],
   "source": [
    "#exporti\n",
    "def doc_link(name, include_bt=True):\n",
    "    \"Create link to documentation for `name`.\"\n",
    "    cname = f'`{name}`' if include_bt else name\n",
    "    try:\n",
    "        link = get_nb_source_link(name)\n",
    "        return f'[{cname}]({link})'\n",
    "    except Exception:\n",
    "        return cname"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "81b24098",
   "metadata": {
    "tags": [
     "remove-input"
    ]
   },
   "outputs": [],
   "source": [
    "#exporti\n",
    "def type_repr(t):\n",
    "    \"Representation of type `t` (in a type annotation)\"\n",
    "    if (isinstance(t, Param)):\n",
    "        return f'\"{t.help}\"'\n",
    "    if getattr(t, '__args__', None):\n",
    "        args = t.__args__\n",
    "        if len(args) == 2 and args[1] == type(None):  # noqa: E721\n",
    "            return f'`Optional`\\[{type_repr(args[0])}\\]'  # noqa: W605\n",
    "        reprs = ', '.join([_format_annos(o, highlight=True) for o in args])\n",
    "        return f'{doc_link(get_name(t))}\\[{reprs}\\]'  # noqa: W605\n",
    "    else:\n",
    "        return doc_link(_format_annos(t))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e47d7888",
   "metadata": {
    "tags": [
     "remove-input"
    ]
   },
   "outputs": [],
   "source": [
    "#exporti\n",
    "def format_param(p):\n",
    "    \"Formats function param to `param:Type=val` with font weights: param=bold, val=italic\"\n",
    "    arg_prefix = _arg_prefixes.get(p.kind, '')  # asterisk prefix for *args and **kwargs\n",
    "    res = f\"**{arg_prefix}`{p.name}`**\"\n",
    "    if hasattr(p, 'annotation') and p.annotation != p.empty:\n",
    "        res += f':{type_repr(p.annotation)}'\n",
    "    if p.default != p.empty:\n",
    "        default = getattr(p.default, 'func', p.default)  # For partials\n",
    "        if hasattr(default, '__name__'):\n",
    "            default = getattr(default, '__name__')\n",
    "        else:\n",
    "            default = repr(default)\n",
    "        if is_enum(default.__class__):  # Enum have a crappy repr\n",
    "            res += f'=*`{default.__class__.__name__}.{default.name}`*'\n",
    "        else:\n",
    "            res += f'=*`{default}`*'\n",
    "    return res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2a6adb3a",
   "metadata": {
    "tags": [
     "remove-input"
    ]
   },
   "outputs": [],
   "source": [
    "#exporti\n",
    "def _format_func_doc(func, full_name=None):\n",
    "    \"Formatted `func` definition to show in documentation\"\n",
    "    try:\n",
    "        sig = inspect.signature(func)\n",
    "        fmt_params = [format_param(param) for name, param\n",
    "                      in sig.parameters.items() if name not in ('self', 'cls')]\n",
    "    except Exception as e:\n",
    "        print(f'exception: {e}')\n",
    "        fmt_params = []\n",
    "    name = f'<code>{full_name or func.__name__}</code>'\n",
    "    arg_str = f\"({', '.join(fmt_params)})\"\n",
    "    f_name = f\"<code>class</code> {name}\" if inspect.isclass(func) else name\n",
    "    return f'{f_name}', f'{name}{arg_str}'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bf1065db",
   "metadata": {
    "tags": [
     "remove-input"
    ]
   },
   "outputs": [],
   "source": [
    "#exporti\n",
    "def _format_cls_doc(cls, full_name):\n",
    "    \"Formatted `cls` definition to show in documentation\"\n",
    "    parent_class = inspect.getclasstree([cls])[-1][0][1][0]\n",
    "    name, args = _format_func_doc(cls, full_name)\n",
    "    if parent_class != object:\n",
    "        args += f' :: {doc_link(get_name(parent_class))}'\n",
    "    return name, args"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4665f9b9",
   "metadata": {
    "tags": [
     "remove-input"
    ]
   },
   "outputs": [],
   "source": [
    "#exporti\n",
    "def show_doc(\n",
    "    elt,\n",
    "    doc_string: bool = True,\n",
    "    name=None,\n",
    "    title_level=None,\n",
    "    disp=True,\n",
    "    default_cls_level=2,\n",
    "    show_all_docments=False,\n",
    "    verbose=False\n",
    "):\n",
    "    \"\"\"\n",
    "    Show documentation for element `elt` with potential input\n",
    "    documentation. Supported types: class, function, and enum.\n",
    "    \"\"\"\n",
    "    elt = getattr(elt, '__func__', elt)\n",
    "    qname = name or qual_name(elt)\n",
    "    is_class = '.' in qname or inspect.isclass\n",
    "    if inspect.isclass(elt):\n",
    "        if is_enum(elt):\n",
    "            name, args = _format_enum_doc(elt, qname)\n",
    "        else:\n",
    "            name, args = _format_cls_doc(elt, qname)\n",
    "    elif callable(elt):\n",
    "        name, args = _format_func_doc(elt, qname)\n",
    "    else:\n",
    "        name, args = f\"<code>{qname}</code>\", ''\n",
    "    link = get_source_link(elt)\n",
    "    source_link = f'<a href=\"{link}\" class=\"source_link\" style=\"float:right\">[source]</a>'\n",
    "    title_level = title_level or (default_cls_level if inspect.isclass(elt) else 4)\n",
    "    doc = f'<h{title_level} id=\"{qname}\" class=\"doc_header\">{name}{source_link}</h{title_level}>'\n",
    "    doc += f'\\n\\n> {args}\\n\\n' if len(args) > 0 else '\\n\\n'\n",
    "    s = ''\n",
    "    try:\n",
    "        monospace = get_config().d.getboolean('monospace_docstrings', False)\n",
    "    except FileNotFoundError:\n",
    "        monospace = False\n",
    "\n",
    "    if doc_string and inspect.getdoc(elt):\n",
    "        s = inspect.getdoc(elt)  # type: ignore\n",
    "        # doc links don't work inside markdown pre/code blocks\n",
    "        s = f'```\\n{s}\\n```' if monospace else add_doc_links(s, elt)\n",
    "        doc += s\n",
    "\n",
    "    if len(args) > 0:\n",
    "        if hasattr(elt, '__init__') and isclass(elt):\n",
    "            elt = elt.__init__\n",
    "        if is_source_available(elt):\n",
    "            if show_all_docments or _has_docment(elt):\n",
    "                if hasattr(elt, \"__delwrap__\"):\n",
    "                    arg_dict, kwargs = _handle_delegates(elt)\n",
    "                    doc += _get_docments(\n",
    "                        elt,\n",
    "                        ment_dict=arg_dict,\n",
    "                        with_return=True,\n",
    "                        kwargs=kwargs,\n",
    "                        monospace=monospace,\n",
    "                        is_class=is_class\n",
    "                    )\n",
    "                else:\n",
    "                    doc += _get_docments(elt, monospace=monospace, is_class=is_class)\n",
    "            elif verbose:\n",
    "                print(f\"\"\"Warning: `docments` annotations will not work for\n",
    "                built-in modules, classes, functions, and `enums` and are\n",
    "                unavailable for {qual_name(elt)}. They will not be shown\"\"\")\n",
    "    if disp:\n",
    "        display(Markdown(doc))\n",
    "    else:\n",
    "        return doc"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b9608c7c",
   "metadata": {},
   "source": [
    "## Docs metadata\n",
    "\n",
    "The following cells was extracted from [nb-nbdev](https://github.com/fastai/jb-nbdev) and will perform some changes on our metadata to integrate nbdev and mynb-st."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "08024850",
   "metadata": {
    "tags": [
     "remove-input"
    ]
   },
   "outputs": [],
   "source": [
    "#exporti\n",
    "import glob\n",
    "from fastcore.all import L, compose, Path\n",
    "from nbdev.export2html import _mk_flag_re, _re_cell_to_collapse_output, check_re\n",
    "from nbdev.export import check_re_multi\n",
    "import nbformat as nbf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a9e6bca1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#export\n",
    "def nbglob(fname='.', recursive=False, extension='.ipynb') -> L:\n",
    "    \"\"\"Find all files in a directory matching an extension.\n",
    "    Ignores hidden directories and filenames starting with `_`\"\"\"\n",
    "    fname = Path(fname)\n",
    "    if fname.is_dir():\n",
    "        abs_name = fname.absolute()\n",
    "        rec_path = f'{abs_name}/**/*{extension}'\n",
    "        non_rec_path = f'{abs_name}/*{extension}'\n",
    "        fname = rec_path if recursive else non_rec_path\n",
    "    fls = L(\n",
    "        glob.glob(str(fname), recursive=recursive)\n",
    "    ).filter(\n",
    "        lambda x: '/.' not in x\n",
    "    ).map(Path)\n",
    "    return fls.filter(lambda x: not x.name.startswith('_') and x.name.endswith(extension))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "de3f485d",
   "metadata": {
    "tags": [
     "remove-input"
    ]
   },
   "outputs": [],
   "source": [
    "#exporti\n",
    "def upd_metadata(cell, tag):\n",
    "    cell_tags = list(set(cell.get('metadata', {}).get('tags', [])))\n",
    "    if tag not in cell_tags:\n",
    "        cell_tags.append(tag)\n",
    "    cell['metadata']['tags'] = cell_tags"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "06737dbe",
   "metadata": {
    "tags": [
     "remove-cell",
     "remove-input"
    ]
   },
   "outputs": [],
   "source": [
    "#export\n",
    "def hide(cell):\n",
    "    \"\"\"Hide inputs of `cell` that need to be hidden\n",
    "    if check_re_multi(cell, [_re_show_doc, *_re_hide_input]): upd_metadata(cell, 'remove-input')\n",
    "    elif check_re(cell, _re_hide_output): upd_metadata(cell, 'remove-output')\n",
    "    \"\"\"\n",
    "    regexes = ['#(.+|)hide', '%%ipytest']\n",
    "    if check_re_multi(cell, regexes):\n",
    "        upd_metadata(cell, 'remove-cell')\n",
    "\n",
    "    regexes = ['#(.+|)exporti']\n",
    "    if check_re_multi(cell, regexes):\n",
    "        upd_metadata(cell, 'remove-input')\n",
    "\n",
    "    return cell\n",
    "\n",
    "\n",
    "_re_cell_to_collapse_input = _mk_flag_re(\n",
    "    '(collapse_input|collapse-input)', 0, \"Cell with #collapse_input\")\n",
    "\n",
    "\n",
    "def collapse_cells(cell):\n",
    "    \"Add a collapse button to inputs or outputs of `cell` in either the open or closed position\"\n",
    "    if check_re(cell, _re_cell_to_collapse_input):\n",
    "        upd_metadata(cell, 'hide-input')\n",
    "    elif check_re(cell, _re_cell_to_collapse_output):\n",
    "        upd_metadata(cell, 'hide-output')\n",
    "    return cell"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b1844edf",
   "metadata": {
    "tags": [
     "remove-input"
    ]
   },
   "outputs": [],
   "source": [
    "#exporti\n",
    "if __name__ == '__main__':\n",
    "\n",
    "    _func = compose(hide, collapse_cells)\n",
    "    files = nbglob('nbs/')\n",
    "\n",
    "    for file in files:\n",
    "        nb = nbf.read(file, nbf.NO_CONVERT)\n",
    "        for c in nb.cells:\n",
    "            _func(c)\n",
    "        nbf.write(nb, file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cf24e1bf",
   "metadata": {
    "tags": [
     "remove-cell"
    ]
   },
   "outputs": [],
   "source": [
    "#hide\n",
    "from nbdev.export import notebook2script\n",
    "notebook2script()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
